# -- String to partially override the pod and service names. Will maintain the
# release name.
nameOverride: ""
# -- String to fully override the pod and service names. If set, deployments,
# services, ingresses, *et.al*, will use this name, and `nameOverride` will be
# ignored.
fullnameOverride: ""

global:
  # -- URL of this Wharf instance. Mostly only used in the `ingress` and
  # `ingressRoute` settings to route the appropriate requests, but also in
  # Wharf's API so it can properly refer to itself.
  url: wharf.example.org
  # -- Used in RabbitMQ & Jenkins to multiplex jobs and messages on the same
  # instances while keeping track of their origin.
  instanceId: dev
  # -- This flag is forwarded to the frontend where it can be used to show
  # slightly different styling depending on if it's for production or not.
  isProduction: false

web:
  # -- Number of deployment replicas.
  replicaCount: 1

  # -- Docker image that runs the frontend/web
  image: quay.io/iver-wharf/wharf-web:v1.4.0

  # -- [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/containers/images/#updating-images)
  imagePullPolicy: ""
  
  # -- Security context on the pod level.
  # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  #  fsGroup: 2000
  
  # -- Security context inside the container.
  # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container)
  containerSecurityContext: {}
  #  capabilities:
  #    drop:
  #    - ALL
  #    add:
  #    - NET_BIND_SERVICE
  #  readOnlyRootFilesystem: true
  #  runAsNonRoot: true
  #  runAsUser: 1000

  # -- Resource requests and limits. It's best practice to apply some
  # appropriate values here
  # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  #  requests:
  #    cpu: 100m
  #    memory: 128Mi

  # -- Unhealthy liveness probes makes pod restart.
  # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  livenessProbe:
    httpGet:
      path: /
      port: http

  # -- Unhealthy readiness probes makes pod never recieve network traffic.
  # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  readinessProbe:
    httpGet:
      path: /
      port: http

  # -- Select which node to run on, based on node labels.
  # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/)
  nodeSelector:
    kubernetes.io/os: linux

  # -- [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
  tolerations: []
  # -- [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity)
  affinity: {}
  
  # -- Recommended to add `emptyDir` volumes for nginx to have faster and more flexible caching.
  volumes:
    - name: cache
      emptyDir: {}
    - name: run
      emptyDir: {}
  # -- Recommended to add `emptyDir` volumes for nginx to have faster and more flexible caching.
  volumeMounts:
    - name: cache
      mountPath: /var/cache/nginx
    - name: run
      mountPath: /run

  # -- Service type. [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
  serviceType: ClusterIP
  # -- Service port. [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service)
  servicePort: 80
  # -- Container port. This needs to correlate to the port that the application
  # listens on. [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service)
  containerPort: 8080

api:
  # -- Number of deployment replicas.
  replicaCount: 1

  # -- Docker image that runs the frontend/web
  image: quay.io/iver-wharf/wharf-api:v4.2.0
  
  # -- [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/containers/images/#updating-images)
  imagePullPolicy: ""

  # -- Security context on the pod level.
  # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
  podSecurityContext: {}
  #  fsGroup: 2000

  # -- Security context inside the container.
  # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container)
  containerSecurityContext: {}
  #  capabilities:
  #    drop:
  #    - ALL
  #  readOnlyRootFilesystem: true
  #  runAsNonRoot: true
  #  runAsUser: 1000

  # -- Resource requests and limits. It's best practice to apply some
  # appropriate values here
  # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  resources: {}
  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  #  requests:
  #    cpu: 100m
  #    memory: 128Mi

  # -- Unhealthy liveness probes makes pod restart.
  # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  livenessProbe:
    httpGet:
      path: /health
      port: http

  # -- Unhealthy readiness probes makes pod never recieve network traffic.
  # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  readinessProbe:
    httpGet:
      path: /health
      port: http

  # -- Select which node to run on, based on node labels.
  # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/)
  nodeSelector:
    kubernetes.io/os: linux

  # -- [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
  tolerations: []
  # -- [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity)
  affinity: {}

  # -- Service type. [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
  serviceType: ClusterIP
  # -- Service port. [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service)
  servicePort: 80
  # -- Container port. This needs to correlate to the port that the application
  # listens on. [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service)
  containerPort: 8080
  
  # -- Jenkins webhook endpoint used when starting new builds.
  # Sets `WHARF_CI_TRIGGERURL` environment variable.
  # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
  ciUrl: http://jenkins.example.com/generic-webhook-trigger/invoke
  # -- Jenkins webhook secret token used when starting new builds.
  # Sets `WHARF_CI_TRIGGERTOKEN` environment variable.
  # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
  ciToken: changeit
  #ciToken:
  #  valueFrom:
  #    secretKeyRef:
  #      name: wharf-jenkins-secrets
  #      key: webhook-token

  http:
    # -- Adds BasicAuth to the API. This is experimental and is not
    # automatically applied to the web, but only applied to the API.
    # Sets `WHARF_HTTP_BASICAUTH` environment variable.
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    basicAuth: ""

    # -- Sets the IP address and port to bind the API server to.
    # Sets `WHARF_HTTP_BINDADDRESS` environment variable.
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    bindAddress: "0.0.0.0:8080"

  # Settings for Wharf API's database connection
  db:
    # -- Currently only `"postgres"` is a valid value here. Set to `null` or
    # empty string `""` if you wish to populate the `WHARF_DB_HOST`,
    # `WHARF_DB_PORT`, `WHARF_DB_USER`, `WHARF_DB_PASS` environment variables
    # yourself via `api.extraEnvs`.
    # Sets `WHARF_DB_DRIVER` environment variable.
    # Does not support ["Smart environment fields"](./README.md#smart-environment-fields)
    driver: postgres
  
    # -- Name of the database (or "schema" in MySQL terms) holding all the
    # tables. Sets `WHARF_DB_NAME` environment variable.
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    name: wharf

    # -- Username used when connecting to the database.
    # Sets `WHARF_DB_USERNAME` environment variable.
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    username: postgres
  
    # -- Password used when connecting to the database.
    # Sets `WHARF_DB_PASSWORD` environment variable.
    # Recommended to pull this from a secret.
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    password: changeit
    #password:
    #  valueFrom:
    #    secretKeyRef:
    #      name: my-wharf-postgres-cred-secret
    #      key: postgresql-password

    # -- Database hostname used when connecting to the database.
    # Sets `WHARF_DB_HOST` environment variable.
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    host: wharf-db

    # -- Database port used when connecting to the database.
    # Sets `WHARF_DB_PORT` environment variable. ***(Integers must be quoted!)***
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    port: "5432"

    # -- Maximum number of idle connections that wharf-api will use towards the
    # database at a single point in time.
    # Sets `WHARF_DB_MAXIDLECONNS` environment variable.
    # ***(Integers must be quoted!)***
    # See [GORM docs](https://golang.org/pkg/database/sql/#DB.SetMaxIdleConns).
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    maxIdleConns: "2"

    # -- Maximum number of open connections that wharf-api will use towards the
    # database at a single point in time. Values <= 0 means no limit.
    # Sets `WHARF_DB_MAXOPENCONNS` environment variable. ***(Integers must be quoted!)***
    # See [GORM docs](https://golang.org/pkg/database/sql/#DB.SetMaxOpenConns).
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    maxOpenConns: "0"

    # -- Maximum age for a given database connection. If any connection exceeds
    # this limit, while not in use, it will be disconnected.
    # Sets `WHARF_DB_MAXCONNLIFETIME` environment variable.
    # Value is a Go duration, see [Go docs](https://pkg.go.dev/time#ParseDuration).
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    maxConnLifetime: 20m

  # Settings Wharf API's integration with RabbitMQ
  rabbitmq:
    # -- `true` to enable RabbitMQ integration, `false` to disable it.
    # All other `api.rabbitmq...` settings are ignored if RabbitMQ has been
    # disabled.
    # Does not support ["Smart environment fields"](./README.md#smart-environment-fields)
    enabled: false
    # -- Username used by Wharf to authenticate with RabbitMQ.
    # Sets `WHARF_MQ_USERNAME` environment variable.
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    username: user
    # -- Password used by Wharf to authenticate with RabbitMQ.
    # Sets `WHARF_MQ_PASSWORD` environment variable.
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    password: changeit
    #password:
    #  valueFrom:
    #    secretKeyRef:
    #      name: rabbitmq-auth
    #      value: password
    # -- Host name *(without the protocol)* used by Wharf to connect to RabbitMQ.
    # Sets `WHARF_MQ_HOST` environment variable.
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    host: rabbitmq.local
    # -- Host port used by Wharf to connect to RabbitMQ.
    # Sets `WHARF_MQ_PORT` environment variable. ***(Integers must be quoted!)***
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    port: "5672"
    # -- RabbitMQ virtual host to push RabbitMQ messages into.
    # Sets `WHARF_MQ_VHOST` environment variable.
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    vHost: /
    # -- RabbitMQ queue name to push RabbitMQ messages into.
    # Sets `WHARF_MQ_QUEUENAME` environment variable.
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    name: wharf_queue
    # -- When the Wharf API starts up, how many times should it attempt to connect
    # to the RabbitMQ instance before giving up and restarting?
    # Sets `WHARF_MQ_CONNATTEMPTS` environment variable.
    # ***(Integers must be quoted!)***
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    connAttempts: "10"


  # -- If `api.db.driver` is unset, then you must populate your own
  # database connection here.
  # [Read more (kubernetes.io)](https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/)
  extraEnvs: []
    #- name: WHARF_DB_HOST
    #  value: wharf-db
    #- name: WHARF_DB_PORT
    #  value: "5432"
    #- name: WHARF_DB_USER
    #  value: postgres
    #- name: WHARF_DB_PASS
    #  value: changeit

# Provider settings. You are free to add more providers here. This is done by
# adding new keys to this map. For example, adding `providers.gitea.enabled`,
# `providers.gitea.image`, etc.
providers:
  # Example new provider, with all of its settings.
  example:
    # -- If this is `false` or unset then this provider will be ignored.
    enabled: false
  
    # -- The provider name affects the pod name, service name, URL base, et.al.
    # If left unset, it will default to name of `providers.*` map/directory key
    # (ex: `providers.example` => `"example"`)
    nameOverride: example-provider
  
    # -- Overrides URL base path
    # If left unset, it will default to `"/import/"` followed by name of
    # provider (ex: `"/import/example-provider"`). Default is affected by the
    # `providers.*.nameOverride` setting.
    urlBaseOverride: /import/my-example-provider

    # -- Overrides outside URL to Wharf.
    # Sets `WHARF_URL` environment variable.
    # Defaults to the `global.url` value when unset.
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    urlOverride: "wharf.example.org"

    # -- Overrides URL used to connect to the Wharf API.
    # Sets `WHARF_API_URL` environment variable.
    # Defaults to the full release name suffixed with "-api", to target the
    # Wharf API Kubernetes service, when left unset.
    # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
    apiUrlOverride: "http://my-custom-wharf-api-service"

    http:
      # -- Sets the IP address and port to bind the API server to.
      # Sets `BIND_ADDRESS` environment variable.
      # Supports ["Smart environment fields"](./README.md#smart-environment-fields)
      bindAddress: "0.0.0.0:8080"
  
    # -- Number of deployment replicas.
    replicaCount: 1
  
    # -- Docker image that runs the provider API
    image: ubuntu:latest
  
    # -- [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/containers/images/#updating-images)
    imagePullPolicy: ""
  
    # Defaults to `imagePullSecrets`.
    # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)
    imagePullSecrets: []
    #  - name: myDockerCredentialsSecret
  
    # -- Additional labels to add to this provider's deployment
    labels: {}
    #  app: my-new-wharf-provider
  
    # -- Additional annotations to add to this provider's deployment
    annotations: {}
    #  prometheus.io/scrape: "true"
  
    # -- Additional labels to add to this provider's pod
    podLabels: {}
    #  app: my-new-wharf-provider
  
    # Additional annotations to add to this provider's pod
    podAnnotations: {}
    #  prometheus.io/scrape: "true"
  
    # -- Security context on the pod level.
    # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod)
    podSecurityContext: {}
    #  fsGroup: 2000
  
    # -- Security context inside the container.
    # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container)
    containerSecurityContext: {}
    #  capabilities:
    #    drop:
    #    - ALL
    #  readOnlyRootFilesystem: true
    #  runAsNonRoot: true
    #  runAsUser: 1000
  
    # -- Service type. [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
    serviceType: ClusterIP

    # -- Service port. [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service)
    servicePort: 80
  
    # -- Container port. This needs to correlate to the port that the application
    # listens on. [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service)
    containerPort: 8080
  
    # -- Resource requests and limits. It's best practice to apply some
    # appropriate values here
    # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
    resources: {}
    #  limits:
    #    cpu: 100m
    #    memory: 128Mi
    #  requests:
    #    cpu: 100m
    #    memory: 128Mi
  
    # -- Select which node to run on, based on node labels.
    # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/)
    nodeSelector: {}
  
    # -- [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
    tolerations: []
    # -- [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity)
    affinity: {}
  
    # -- This chart adds `WHARF_API_URL` and `WHARF_PROVIDER_URL_BASE`
    # environment variables, but you are free to add additional environment
    # variables here.
    # [Read more (kubernetes.io)](https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/)
    extraEnvs: []
    #  - name: MY_ENV_VALUE:
    #    value: foo
    #  - name: MY_ENV_SECRET:
    #    valueFrom:
    #      secretKeyRef:
    #        name: some-k8s-secret-name
    #        key: some-k8s-secret-key
  
    # -- Unhealthy liveness probes makes pod restart.
    # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
    livenessProbe:
      httpGet:
        path: /
        port: http

    # -- Unhealthy readiness probes makes pod never recieve network traffic.
    # [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
    readinessProbe:
      httpGet:
        path: /
        port: http

  gitlab:
    # -- There are far more settings available. Take a look at the
    # `providers.example.*` settings for a comparison.
    enabled: true
    # -- Default image used in the `gitlab` provider
    image: quay.io/iver-wharf/wharf-provider-gitlab:v1.2.0
    # -- Default image pull policy used in the `gitlab` provider
    imagePullPolicy: IfNotPresent
    # -- Default resources requested by the GitLab provider
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    # -- Default node selector for the `gitlab` provider
    nodeSelector:
      kubernetes.io/os: linux

  github:
    # -- There are far more settings available. Take a look at the
    # `providers.example.*` settings for a comparison.
    enabled: true
    # -- Default image used in the `github` provider
    image: quay.io/iver-wharf/wharf-provider-github:v2.0.0
    # -- Default image pull policy used in the `github` provider
    imagePullPolicy: IfNotPresent
    # -- Default resources requested by the `github` provider
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    # -- Default node selector for the `github` provider
    nodeSelector:
      kubernetes.io/os: linux

  azuredevops:
    # -- There are far more settings available. Take a look at the
    # `providers.example.*` settings for a comparison.
    enabled: true
    # -- Default image used in the `azuredevops` provider
    image: quay.io/iver-wharf/wharf-provider-azuredevops:v2.0.1
    # -- Default image pull policy used in the `azuredevops` provider
    imagePullPolicy: IfNotPresent
    # -- Default resources requested by the `azuredevops` provider
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    # -- Default node selector for the `azuredevops` provider
    nodeSelector:
      kubernetes.io/os: linux

# [Read more (kubernetes.io/docs)](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)
imagePullSecrets: []
#  - name: myDockerCredentialsSecret

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- The name of the service account to use.
  # If not set and `serviceAccount.create` is `true`, a name is generated using
  # the fullname template
  name: ""

ingress:
  # -- Enables deploying a preconfigured Kubernetes Ingress to route traffic
  # to the different Wharf services, using `global.url` as host name.
  enabled: false
  apiVersion: networking.k8s.io/v1beta1
  annotations: {}
  tls: {}
    # secretName: wharf-example-tls

  # -- Optionally add additional paths that will be added on top of the routes
  # for the web `/`, main API `/api`, and the provider APIs `/import/*`
  extraPaths: []
  #  - path: /logstash
  #    backend:
  #      serviceName: wharf-logstash
  #      servicePort: 8080

# Traefik IngressRoute
ingressRoute:
  # -- Enables deploying a preconfigured Traefik IngressRoute to route traffic
  # to the different Wharf services, using `global.url` as host name.
  enabled: false
  apiVersion: traefik.containo.us/v1alpha1

  entries:
    - # -- Only used in the IngressRoute object names
      name: http
      # -- Sample Traefik entrypoint that could be for `:80` traffic
      entryPoints:
        - web
      # -- Good idea is to hook up the RedirectScheme to redirect http->https
      middlewares: []
      #  - name: httpredirect
      #    namespace: default
      tls: {}
      annotations: {}

    - # -- Only used in the IngressRoute object names
      name: https
      # -- Sample Traefik entrypoint that could be for `:443` traffic
      entryPoints:
        - websecure
      middlewares: []
      tls:
        secretName: wharf-example-tls
      annotations: {}

  # -- Optionally add additional routes that will be added on top of the routes
  # for the web `/`, main API `/api`, and the provider APIs `/import/*`
  extraRoutes: []
  #  - kind: Rule
  #    match: Host(`wharf.example.com`) && PathPrefix(`/logstash`)
  #    services:
  #    - name: wharf-logstash
  #      port: 8080

