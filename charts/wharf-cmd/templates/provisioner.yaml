{{- if .Values.provisioner.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "wharf-cmd.fullname" . }}-provisioner
  labels:
    component: provisioner
    {{- include "wharf-cmd.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      component: provisioner
      {{- include "wharf-cmd.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        component: provisioner
        {{- include "wharf-cmd.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: wharf-cmd
      {{- with .Values.provisioner.imagePullSecrets | default .Values.common.imagePullSecrets }}
      imagePullSecrets: {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: provisioner
          image: {{ .Values.provisioner.image | default .Values.common.image | quote }}
          {{- with .Values.provisioner.imagePullPolicy | default .Values.common.imagePullPolicy }}
          imagePullPolicy: {{ . | quote }}
          {{- end }}
          args:
            - --loglevel
            - {{ .Values.provisioner.loglevel | default .Values.common.loglevel | quote }}
            - provisioner
            - serve
            {{- with .Values.provisioner.extraArgs }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.provisioner.extraEnvs }}
          env: {{- toYaml . | nindent 12}}
          {{- end }}
          volumeMounts:
          - mountPath: /etc/iver-wharf/wharf-cmd
            name: config
            readOnly: true
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          ports:
            - name: http
              containerPort: {{ .Values.provisioner.containerPort }}
              protocol: TCP
      {{- with .Values.provisioner.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.provisioner.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.provisioner.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ include "wharf-cmd.fullname" . }}-provisioner-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "wharf-cmd.fullname" . }}-provisioner-config
  labels:
    component: provisioner
    {{- include "wharf-cmd.labels" . | nindent 4 }}
data:
  {{- $configContainer := dict }}
  {{- with .Values.worker.image | default .Values.common.image }}
    {{- $_ := regexReplaceAll "(.*):.*" . "${1}" | set $configContainer "image" }}
    {{- $_ := regexReplaceAll ".*:(.*)" . "${1}" | default "latest" | set $configContainer "imageTag" }}
  {{- end }}
  {{- with .Values.worker.imagePullPolicy | default .Values.common.imagePullPolicy }}
    {{- $_ := . | set $configContainer "imagePullPolicy" }}
  {{- end }}

  {{- $workerConfig := (dict "configMapName" (printf "%s-worker-config" (include "wharf-cmd.fullname" .))) }}
  {{- with $configContainer }}
    {{- $_ := . | set $workerConfig "container" }}
  {{- end }}
  {{- with .Values.worker.extraEnvs }}
    {{- $_ := . | set $workerConfig "extraEnvs" }}
  {{- end }}
  {{- with .Values.worker.extraArgs }}
    {{- $_ := . | set $workerConfig "extraArgs" }}
  {{- end }}
  {{- with .Values.worker.imagePullSecrets | default .Values.common.imagePullSecrets }}
    {{- $_ := . | set $workerConfig "imagePullSecrets" }}
  {{- end }}

  {{- $provisionerConfig := (dict "k8s" (dict "worker" $workerConfig)) }}

  {{- $config := deepCopy .Values.common.config | merge .Values.provisioner.config }}
  {{- $config = dict "instanceId" .Values.global.instanceId "provisioner" $provisionerConfig | merge $config }}
  wharf-cmd-config.yml: |
    {{- $config | toYaml | nindent 4 }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "wharf-cmd.fullname" . }}-provisioner
  labels:
    component: provisioner
    {{- include "wharf-cmd.labels" . | nindent 4 }}
spec:
  type: {{ .Values.provisioner.serviceType | quote }}
  ports:
  - name: http
    port: {{ .Values.provisioner.servicePort }}
    protocol: TCP
    targetPort: http
  selector:
    component: provisioner
    {{- include "wharf-cmd.selectorLabels" . | nindent 4 }}
  type: ClusterIP
{{- end }}
